/*! Image Uploader - v1.2.3 - 26/11/2019
* Copyright (c) 2019 Christian Bayer; Licensed MIT */ !function (e) { e.fn.imageUploader = function (i) { let t = null, n, a = { preloaded: [], imagesInputName: "images", preloadedInputName: "preloaded", label: "Drag & Drop files here or click to browse", extensions: [".jpg", ".jpeg", ".png", ".gif", ".svg"], mimes: ["image/jpeg", "image/png", "image/gif", "image/svg+xml"], maxSize: void 0, maxFiles: void 0 }, s = this, d = new DataTransfer; s.settings = {}, s.init = function () { s.settings = e.extend(s.settings, a, i), s.each(function (i, t) { let n = l(); if (e(t).append(n), n.on("dragover", f.bind(n)), n.on("dragleave", f.bind(n)), n.on("drop", r.bind(n)), s.settings.preloaded.length) { n.addClass("has-files"); let a = n.find(".uploaded"); for (let d = 0; d < s.settings.preloaded.length; d++)a.append(p(s.settings.preloaded[d].src, s.settings.preloaded[d].id, !0)) } }) }; let l = function () { let i = e("<div>", { class: "image-uploader" }); n = e("<input>", { type: "file", id: s.settings.imagesInputName + "-" + h(), name: s.settings.imagesInputName + "[]", accept: s.settings.extensions.join(","), multiple: "" }).appendTo(i), e("<div>", { class: "uploaded" }).appendTo(i); let t = e("<div>", { class: "upload-text" }).appendTo(i); return e("<i>", { class: "iui-cloud-upload" }).appendTo(t), e("<span>", { text: s.settings.label }).appendTo(t), i.on("click", function (e) { o(e), n.trigger("click") }), n.on("click", function (e) { e.stopPropagation() }), n.on("change", r.bind(i)), i }, o = function (e) { e.preventDefault(), e.stopPropagation() }, p = function (i, a, l) { let p = e("<div>", { class: "uploaded-image" }), f = x(t.replace(".", "")), r = ""; return r = -1 == [".jpg", ".jpeg", ".png", ".gif", ".svg", ".gif"].indexOf(t) ? (e("<span>", { class: "uploaded-image-custom", html: `<i class="fas ${f}"></i>` }).appendTo(p), e("<button>", { class: "delete-image" }).appendTo(p)) : (e("<img>", { src: i }).appendTo(p), e("<button>", { class: "delete-image" }).appendTo(p)), e("<i>", { class: "iui-close" }).appendTo(r), l ? (p.attr("data-preloaded", !0), e("<input>", { type: "hidden", name: s.settings.preloadedInputName + "[]", value: a }).appendTo(p)) : p.attr("data-index", a), p.on("click", function (e) { o(e) }), r.on("click", function (i) { o(i); let t = p.parent(); if (!0 === p.data("preloaded")) s.settings.preloaded = s.settings.preloaded.filter(function (e) { return e.id !== a }); else { let l = parseInt(p.data("index")); t.find(".uploaded-image[data-index]").each(function (i, t) { i > l && e(t).attr("data-index", i - 1) }), d.items.remove(l), n.prop("files", d.files) } p.remove(), t.children().length || t.parent().removeClass("has-files") }), p }, f = function (i) { o(i), "dragover" === i.type ? e(this).addClass("drag-over") : e(this).removeClass("drag-over") }, r = function (i) { o(i); let t = e(this), a = Array.from(i.target.files || i.originalEvent.dataTransfer.files), l = []; e(a).each(function (e, i) { s.settings.extensions && !g(i) || s.settings.mimes && !c(i) || s.settings.maxSize && !m(i) || s.settings.maxFiles && !u(l.length, i) || l.push(i) }), l.length ? (t.removeClass("drag-over"), v(t, l)) : n.prop("files", d.files) }, g = function (e) { return !(0 > s.settings.extensions.indexOf(e.name.replace(RegExp("^.*\\."), "."))) || (alert(`The file "${e.name}" does not match with the accepted file extensions: "${s.settings.extensions.join('", "')}"`), !1) }, c = function (e) { return !(0 > s.settings.mimes.indexOf(e.type)) || (alert(`The file "${e.name}" does not match with the accepted mime types: "${s.settings.mimes.join('", "')}"`), !1) }, m = function (e) { return !(e.size > s.settings.maxSize) || (alert(`The file "${e.name}" exceeds the maximum size of ${s.settings.maxSize / 1024 / 1024}Mb`), !1) }, u = function (e, i) { return !(e + d.items.length + s.settings.preloaded.length >= s.settings.maxFiles) || (alert(`The file "${i.name}" could not be added because the limit of ${s.settings.maxFiles} files was reached`), !1) }, v = function (i, n) { i.addClass("has-files"); let a = i.find(".uploaded"), s = i.find('input[type="file"]'); e(n).each(function (e, i) { d.items.add(i), t = i.name.replace(RegExp("^.*\\."), "."), a.append(p(URL.createObjectURL(i), d.items.length - 1), !1) }), s.prop("files", d.files) }, x = function (e) { return ({ zip: "fa-file-archive", "7z": "fa-file-archive", rar: "fa-file-archive", pdf: "fa-file-pdf", mp3: "fa-file-audio", mp4: "fa-video", mpkg: "fa-video", mpeg: "fa-video", docx: "fa-file", doc: "fa-file", txt: "fa-file", wav: "fa-file", xls: "fa-file" })[e] }; return h = function () { return Date.now() + Math.floor(100 * Math.random() + 1) }, this.init(), this } }(jQuery);